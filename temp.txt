import subprocess
import os
import oci
import sys
from datetime import datetime, timezone
import random
from oci.loggingingestion import LoggingClient, models

# Global declarations
signer = oci.auth.signers.InstancePrincipalsSecurityTokenSigner()
object_storage = oci.object_storage.ObjectStorageClient(config={}, signer=signer)
logging_client = LoggingClient(config={}, signer=signer)

# Global log_id (it will be initialized later)
log_id = None

# Function to send logs to OCI Logging service
def send_log_to_oci(level, message):
    global log_id  # Use the global log_id
    log_entry = oci.loggingingestion.models.LogEntry(
        data=f"{level}: {message}",
        id=f"ID-{random.randint(100000, 999999)}",
        time=datetime.now(timezone.utc).isoformat()
    )
    log_details = oci.loggingingestion.models.PutLogsDetails(
        specversion="1.0",
        log_entry_batches=[
            oci.loggingingestion.models.LogEntryBatch(
                entries=[log_entry],
                source="python-script",
                type="CUSTOM",
                subject="block-volume-management"
            )
        ]
    )

    try:
        logging_client.put_logs(
            log_id=log_id,
            put_logs_details=log_details
        )
    except oci.exceptions.ServiceError as e:
        print(f"Failed to send log: {e}")

# Function to run shell commands and capture output
def run_command(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    if process.returncode != 0:
        send_log_to_oci("ERROR", f"Error running command: {command}")
        send_log_to_oci("ERROR", stderr.decode("utf-8"))
        return None
    return stdout.decode("utf-8").strip()

# Function to get detailed information about a block device
def get_volume_info(device):
    command = f"lsblk /dev/{device} -o NAME,SIZE,TYPE,MOUNTPOINT,FSTYPE -n"
    return run_command(command)

# Function to get the root volume
def get_root_volume():
    command = "lsblk -n -o NAME,MOUNTPOINT | grep ' /$' | awk '{print $1}'"
    root_volume = run_command(command)
    if root_volume:
        return root_volume.strip()
    return None

# Function to get attached block volumes (excluding the root volume)
def get_attached_volumes(root_volume):
    command = "lsblk -n -o NAME,TYPE | grep disk | awk '{print $1}'"
    volumes = run_command(command)
    if volumes:
        return [volume for volume in volumes.splitlines() if volume != root_volume]
    return []

# Function to get filesystem type of a device
def get_filesystem(device):
    command = f"blkid /dev/{device} -s TYPE -o value"
    fs_type = run_command(command)
    return fs_type if fs_type else None  # return None if blkid fails

# Function to mount block volume
def mount_volume(device, mount_point, fs_type):
    if not os.path.exists(mount_point):
        os.makedirs(mount_point)
        send_log_to_oci("INFO", f"Created mount point: {mount_point}")
    command = f"mount -t {fs_type} /dev/{device} {mount_point}"
    result = run_command(command)
    if result is None:
        send_log_to_oci("ERROR", f"Failed to mount /dev/{device} to {mount_point}")
    else:
        send_log_to_oci("INFO", f"Mounted /dev/{device} to {mount_point}")

# Function to upload file to OCI Object Storage
def upload_file_to_object_storage(object_storage, namespace, bucket_name, object_name, file_path):
    with open(file_path, 'rb') as file:
        object_storage.put_object(namespace, bucket_name, object_name, file)
    send_log_to_oci("INFO", f"Uploaded file: {file_path} to {object_name}")

# Main function to discover and mount block volumes, then upload files to OCI Object Storage
def mount_and_upload_volumes(bucket_name, instance_name):
    # Get the root volume
    root_volume = get_root_volume()
    if not root_volume:
        send_log_to_oci("ERROR", "Error: Unable to determine root volume.")
        return

    # Log root volume info
    root_info = get_volume_info(root_volume)
    send_log_to_oci("INFO", f"Root Volume Information:\n{root_info}")

    # Get list of attached block volumes excluding the root volume
    volumes = get_attached_volumes(root_volume)
    if not volumes:
        send_log_to_oci("INFO", "No block volumes attached.")
        return

    # Log other volumes' information
    send_log_to_oci("INFO", "\nOther Attached Volumes Information:")
    for volume in volumes:
        volume_info = get_volume_info(volume)
        send_log_to_oci("INFO", volume_info)

    namespace = object_storage.get_namespace().data  # Get the Object Storage namespace

    for volume in volumes:
        # Get the filesystem type
        fs_type = get_filesystem(volume)

        # Skip unformatted volumes
        if fs_type is None:
            send_log_to_oci("INFO", f"Skipping unformatted volume: {volume}")
            continue

        # Define the mount point as /mnt/<volume_name>
        mount_point = f"/mnt/{volume}"

        # Mount the volume
        mount_volume(volume, mount_point, fs_type)

        # Loop over each file in the volume
        for root, dirs, files in os.walk(mount_point):
            for file in files:
                file_path = os.path.join(root, file)
                object_name = os.path.relpath(file_path, mount_point)
                object_name = f"{instance_name}/{volume}/{object_name}"
                send_log_to_oci("INFO", f"Uploading file: {file_path} to {object_name}")
                upload_file_to_object_storage(object_storage, namespace, bucket_name, object_name, file_path)

if __name__ == "__main__":

    bucket_name = 'cra-backup'
    instance_name = 'cra-myy-test'
    log_id = 'ocid1.log.oc1.iad.amaaaaaac3adhhqabs7cmkbsaoon373n3zax7c7i7yojtrh2b6452jzxaxkq'
    mount_and_upload_volumes(bucket_name, instance_name)
